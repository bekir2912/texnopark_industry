//function validateDecimal(field, rules, i, options) {
//	//var country = COUNTRY_CODE;
//	var val = $(field).val();
//	var isValid = true;
//	if(val!='' && val!=null){
//		if(val.indexof(",")>=0) isValid=false;
//		isValid = isCurrency(val);
//		if(!isValid){
//			return options.allrules.decimal.alertText;
//		}
//	
//	}
//}
//
//var isCurrency_re    = /\d{0,2}(\.\d{1,2})?/;
////	/^\s*(\+|-)?((\d+(\.(\d){1,2})?)|(\.(\d){1,2}))\s*$/;
//function isCurrency (s) {
//   return String(s).search (isCurrency_re) != -1;
//}



function validateIBAN(field, rules, i, options) {
	var country = findCountry(field, rules);
	var val = $(field).val();
	if ("ES" == country) {
		var validationResult= fValidarIBAN(val);
		if(!validationResult)	return options.allrules.iban.alertText;;
	}
}

function validatePhone(field, rules, i, options) {
	var country = findCountry(field, rules);
	var val = $(field).val();
	if ("ES" == country) {
		var regex = /^(\d{9,})$/;
		var validationResult= regex.test(val); // check for 5 digits(val);
		if(!validationResult)	return options.allrules.phone.alertText;;
	}
}

function validateMobilePhone(field, rules, i, options) {
	var country = findCountry(field, rules);
	var countryPhoneCode = null;
	if($('#countryphonecode').length>0){
		countryPhoneCode = $('#countryphonecode').val();
		country = null;
	}
	
	var val = $(field).val();
	if ("ES" == country || "34"==countryPhoneCode ) {
		var regex = /^((6|7)\d{8})$/;
		var validationResult= regex.test(val); // check for 5 digits(val);
		if(!validationResult)	return options.allrules.phone.alertText;;
	}
}

function validateZipCode(field, rules, i, options) {
	var country = findCountry(field, rules);
	var val = $(field).val();
	if ("ES" == country) {
		var regex = /^(\d{5})$/;
		var validationResult= regex.test(val); // check for 5 digits(val);
		if(!validationResult)	return options.allrules.postalCode.alertText;;
	}else if ("AD"==country) {
		var regex = /^(ad\d{3})$/i;
		var validationResult = regex.test(val);
		if(!validationResult)	return options.allrules.postalCode.alertText;
	}else if ("PT"==country){
		var regex = /^(\d{4}-\d{3})$/;
		var validationResult= regex.test(val);
		if(!validationResult)	return options.allrules.postalCode.alertText;
	}
}


function validateTaxId(field, rules, i, options) {
	var country = findCountry(field, rules);
	var val = $(field).val();
	if(val!=null) {
		val = val.trim();
		$(field).val(val);
	}
	if ("ES" == country) {
		var validationResult= valida_nif_cif_nie(val); // check for tax id
		if(!validationResult)	return options.allrules.taxid.alertText;;
	}
}



function findCountry(field, rules) {
	rules = !rules ? [] : rules;
	for(var i=0;i<=rules.length;i++) {
		if(rules[i] && rules[i].indexOf('$')==0) {
			var $el = $(field).closest("form").find(rules[i].substr(1));
			if ($el.length < 1) {
				$el = $(rules[i].substr(1))
			}
			if($el.size()>0 && $el.val()) {
				return $el.val();
			}else{
				return rules[i].substr(1);
			}
		}
	}
	return $("select[name=countrycode]").val() || COUNTRY_CODE;
}





/* SPAIN RELATED FUNCTIONS */
function fValidarIBAN(IBAN) {

	// Limpiamos el numero de IBAN
	IBAN = IBAN.toUpperCase(); // Todo a Mayus
	IBAN = trim(IBAN); // Quitamos blancos de principio y final.
	IBAN = IBAN.replace(/\s/g, ""); // Quitamos blancos del medio.

	var letra1, letra2, num1, num2;
	var isbanaux;
	var numeroSustitucion;

	// Para obtener la letra del NIE solo hay que sustituir la X del principio
	// por un 0 y la Y por un 1 dividir el número entre 23
	// Letra (X,Y,Z) seguida de número de 7 cifras y otra letra (digito de
	// control). (NIE).

	if (IBAN.length != 24) {
		return false;
	}

	// Cogemos las primeras dos letras y las pasamos a numeros
	letra1 = IBAN.substring(0, 1);
	letra2 = IBAN.substring(1, 2);

	num1 = getnumIBAN(letra1);
	num2 = getnumIBAN(letra2);
	// Substituimos las letras por numeros.
	isbanaux = String(num1) + String(num2) + IBAN.substring(2, IBAN.length - 2);
	// Movemos los 6 primeros caracteres al final de la cadena.
	isbanaux = isbanaux.substring(6, IBAN.length - 6)
			+ isbanaux.substring(0, 6);

	// Calculamos el resto
	resto = isbanaux % 97;

	if (resto == 1) {
		return true;
	} else {
		return false;
	}

}

function trim(myString) {
	return myString.replace(/^\s+/g, '').replace(/\s+$/g, '');
}

function valida_nif_cif_nie( a )
{ 
	return ValidateSpanishID(a).valid;
}

ValidateSpanishID = (function() {
	  'use strict';

	  var DNI_REGEX = /^(\d{8})([A-Z])$/;
	  var CIF_REGEX = /^([ABCDEFGHJKLMNPQRSUVW])(\d{7})([0-9A-J])$/;
	  var NIE_REGEX = /^[XYZ]\d{7,8}[A-Z]$/;

	  var ValidateSpanishID = function( str ) {

	    // Ensure upcase and remove whitespace
	    str = str.toUpperCase().replace(/\s/, '');

	    var valid = false;
	    var type = spainIdType( str );

	    switch (type) {
	      case 'dni':
	        valid = validDNI( str );
	        break;
	      case 'nie':
	        valid = validNIE( str );
	        break;
	      case 'cif':
	        valid = validCIF( str );
	        break;
	    }

	    return {
	      type: type,
	      valid: valid
	    };

	  };

	  var spainIdType = function( str ) {
	    if ( str.match( DNI_REGEX ) ) {
	      return 'dni';
	    }
	    if ( str.match( CIF_REGEX ) ) {
	      return 'cif';
	    }
	    if ( str.match( NIE_REGEX ) ) {
	      return 'nie';
	    }
	  };

	  var validDNI = function( dni ) {
	    var dni_letters = "TRWAGMYFPDXBNJZSQVHLCKE";
	    var letter = dni_letters.charAt( parseInt( dni, 10 ) % 23 );

	    return letter == dni.charAt(8);
	  };

	  var validNIE = function( nie ) {

	    // Change the initial letter for the corresponding number and validate as DNI
	    var nie_prefix = nie.charAt( 0 );

	    switch (nie_prefix) {
	      case 'X': nie_prefix = 0; break;
	      case 'Y': nie_prefix = 1; break;
	      case 'Z': nie_prefix = 2; break;
	    }

	    return validDNI( nie_prefix + nie.substr(1) );

	  };

	  var validCIF = function( cif ) {

	    var match = cif.match( CIF_REGEX );
	    var letter  = match[1],
	        number  = match[2],
	        control = match[3];

	    var even_sum = 0;
	    var odd_sum = 0;
	    var n;

	    for ( var i = 0; i < number.length; i++) {
	      n = parseInt( number[i], 10 );

	      // Odd positions (Even index equals to odd position. i=0 equals first position)
	      if ( i % 2 === 0 ) {
	        // Odd positions are multiplied first.
	        n *= 2;

	        // If the multiplication is bigger than 10 we need to adjust
	        odd_sum += n < 10 ? n : n - 9;

	      // Even positions
	      // Just sum them
	      } else {
	        even_sum += n;
	      }

	    }

	    var control_digit = (even_sum + odd_sum).toString().substr(-1);
	    if (control_digit > 0) control_digit = 10 - control_digit;
	    var control_letter = 'JABCDEFGHI'.substr( control_digit, 1 );

	    // Control must be a digit
	    if ( letter.match( /[ABEH]/ ) ) {
	      if (control == control_digit) {
	        return true;
	      }
	    // Control must be a letter
	    } else if ( letter.match( /[KPQS]/ ) ) {
	      if (control == control_letter) {
	        return true;
	      }
	    // Can be either
	    } else {
	      if (control == control_digit || control == control_letter) {
	        return true;
	      }
	    }

	    // Si el CIF no es vÃ¡lido, test con otro mÃ©todo (B85047850 falla??)
	    // http://www.lawebdelprogramador.com/codigo/JavaScript/1992-Validar-un-CIF-NIF-y-DNI.html

	    // Quitamos el primer caracter y el ultimo digito
	    var valueCif = cif.substr(1,cif.length-2);


	    //Sumamos las cifras pares de la cadena
	    var pares = 0;
	    for (i=1;i<valueCif.length;i=i+2) {
	      pares = pares + parseInt(valueCif.substr(i,1));
	    }

	    //Sumamos las cifras impares de la cadena
	    var impares = 0;
	    for (i=0;i<valueCif.length;i=i+2) {
	      var result = parseInt(valueCif.substr(i,1)) * 2;
	      if (String(result).length==1) {
	        // Un solo caracter
	        impares = impares + parseInt(result);
	      } else {
	        // Dos caracteres. Los sumamos...
	        impares = impares + parseInt(String(result).substr(0,1)) + parseInt(String(result).substr(1,1));
	      }
	    }

	    // Sumamos las dos sumas que hemos realizado
	    var suma = pares + impares;

	    var unidad = String(suma).substr(1,1);
	        unidad = 10 - parseInt(unidad);

	    var primerCaracter = cif.substr(0,1).toUpperCase();

	    if (primerCaracter.match(/^[FJKNPQRSUVW]$/)) {
	      //Empieza por .... Comparamos la ultima letra
	      if(String.fromCharCode(64+unidad).toUpperCase()==cif.substr(cif.length-1,1).toUpperCase()) {
	        return true;
	      }
	    } else if (primerCaracter.match(/^[XYZ]$/)) {
	      //Se valida como un dni
	      var newcif;
	      if (primerCaracter=="X") {
	        newcif=cif.substr(1);
	      } else if (primerCaracter=="Y") {
	        newcif="1"+cif.substr(1);
	      } else if (primerCaracter=="Z") {
	        newcif="2"+cif.substr(1);
	      }
	      return validDNI(newcif);
	    } else if (primerCaracter.match(/^[ABCDEFGHLM]$/)) {
	      //Se revisa que el ultimo valor coincida con el calculo
	      if(unidad==10) {
	        unidad=0;
	      }
	      if (cif.substr(cif.length-1,1)==String(unidad)) {
	        return true;
	      }
	    } else {
	      //Se valida como un dni
	      return validDNI(cif);
	    }

	    return false;
	  };

	  return ValidateSpanishID;
	})();

function validatePaymentMethod(field, rules, i, options) {
	var form = field.closest("form, .validationEngineContainer");
	var name = field.attr("name");
	if (form.find("input[name='" + name + "']:checked").size() == 0)		
		return options.allrules.paymentMethodCheck.alertText;;
	
}